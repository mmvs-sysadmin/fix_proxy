user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    lua_shared_dict ua_cache 10m;

    server {
        listen 443 ssl;
        server_name your-proxy-domain.com;

        ssl_certificate /path/to/cert.pem;
        ssl_certificate_key /path/to/privkey.pem;

        location / {
            access_by_lua_block {
                ngx.req.set_header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36")
                ngx.req.set_header("X-Timezone", "Europe/Moscow")
                
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)
                local ok, err = red:connect("127.0.0.1", 6379)
                if ok then
                    local token = red:get("chatgpt_session_token")
                    if token and token ~= ngx.null then
                        ngx.req.set_header("Cookie", "__Secure-next-auth.session-token=" .. token)
                    end
                    red:set_keepalive(10000, 100)  # Возвращение соединения в пул
                else
                    ngx.log(ngx.ERR, "Redis connect failed: ", err)
                end
            }

        }

        # Обработчик time-sync.js
        location = /time-sync.js {
            add_header Content-Type application/javascript;
            return 200 'console.log("Server time:", document.querySelector(\'meta[name="server-time"]\').content);';
        }

        # Инжекция времени в HTML
        body_filter_by_lua_block {
            if ngx.arg[1] and ngx.var.content_type and string.find(ngx.var.content_type, "text/html") then
                local time_tag = '<meta name="server-time" content="' .. ngx.time() .. '">'
                ngx.arg[1] = ngx.arg[1]:gsub("(<head>)", "%1" .. time_tag, 1)
                
                ngx.arg[1] = ngx.arg[1]:gsub(
                    "(</body>)", 
                    '<script src="/time-sync.js"></script>%1',
                    1
                )
            end
        }
    }
}
